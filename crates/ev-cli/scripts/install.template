#!/bin/sh
set -eu

EV_DOWNLOAD_Darwin_universal="https://cli.{{domain}}/{{major}}/{{version}}/x86_64-apple-darwin/ev.tar.gz"
EV_DOWNLOAD_Linux_x86_64="https://cli.{{domain}}/{{major}}/{{version}}/x86_64-unknown-linux-musl/ev.tar.gz"

EV_HASH_Darwin_universal="{{macos_hash}}"
EV_HASH_Linux_x86_64="{{linux_hash}}"

VERSION="{{version}}"
PLATFORM=`uname -s`
ARCH=`uname -m`

if [ $# -ge 1 ]; then
  ONBOARDING_TOKEN=$1
else
  ONBOARDING_TOKEN=""
fi

if [ "$PLATFORM" = "Darwin" ]; then
    ARCH="universal"
fi

# If the install directory is not set, set it to a default
if [ -z ${INSTALL_DIR+x} ]; then
  INSTALL_DIR=/usr/local/bin
fi
if [ ! -d "$INSTALL_DIR" ]; then
  if ! mkdir "$INSTALL_DIR" 2> /dev/null; then
    sudo -k mkdir "$INSTALL_DIR"
  fi
fi
if [ -z ${INSTALL_PATH+x} ]; then
  INSTALL_PATH="${INSTALL_DIR}/ev"
fi
DOWNLOAD_URL_LOOKUP="EV_DOWNLOAD_${PLATFORM}_${ARCH}"
HASH_LOOKUP="EV_HASH_${PLATFORM}_${ARCH}"

ensure_supported_platform() {
  local x
  eval x='\${$DOWNLOAD_URL_LOOKUP-}'
  eval "if [ -n \"$(echo $x)\" ]; then is_supported=true; else is_supported=false; fi"
}
ensure_supported_platform

echo "This script will automatically install the Evervault CLI@${VERSION} for you."
echo "Installation path: ${INSTALL_PATH}"
if [ "x$(id -u)" = "x0" ]; then
  echo "Warning: this script is currently running as root. This is dangerous. "
  echo "         Instead run it as normal user. We will sudo as needed."
fi

if [ -f "$INSTALL_PATH" ]; then
  if [ -z ${CLI_FORCE_INSTALL+x} ]; then
    echo "Looks like you already have the Evervault CLI installed. You can update by running ev update. To force update run the script with CLI_FORCE_INSTALL set to 1."
    exit 0
  else
    echo "Proceeding with update..."
    PERFORM_INSTALL=true
  fi
else
  PERFORM_INSTALL=true
fi

if [ "$is_supported" = false ]; then
  echo "error: your platform and architecture (${PLATFORM}-${ARCH}) is unsupported."
  exit 2
fi

eval DOWNLOAD_URL=\$$DOWNLOAD_URL_LOOKUP
eval EXPECTED_HASH=\$$HASH_LOOKUP

if [ "$PERFORM_INSTALL" = true ]; then
  TEMP_FILE=`mktemp "${TMPDIR:-/tmp}/ev.XXXXXXXX"`
fi

cleanup() {
  rm -f "$TEMP_FILE"
  rm -rf "$TARGET_DIR"
}

if [ "$PERFORM_INSTALL" = true ]; then
  trap cleanup EXIT
fi

install_via_wget() {
  wget -q "$DOWNLOAD_URL" -O "$TEMP_FILE"
}

install_via_curl() {
  curl -SL --progress-bar "$DOWNLOAD_URL" > "$TEMP_FILE"
}

verify_hash() {
  if [ "$PLATFORM" = "Darwin" ]; then
    COMPUTED_HASH=$(shasum -a 256 "$TEMP_FILE" | cut -d ' ' -f 1)
  else
    COMPUTED_HASH=$(sha256sum "$TEMP_FILE" | cut -d ' ' -f 1)
  fi
  
  if [ "$COMPUTED_HASH" != "$EXPECTED_HASH" ]; then
    echo "Error: Hash verification failed"
    echo "Expected: $EXPECTED_HASH"
    echo "Got:      $COMPUTED_HASH"
    exit 4
  fi
  echo "Hash verification successful"
}

if [ "$PERFORM_INSTALL" = true ]; then
  if hash curl 2> /dev/null; then
    install_via_curl
  elif hash wget 2> /dev/null; then
    install_via_wget
  else
    echo "You do not have curl or wget installed, which are required for this script."
    exit 3
  fi
  
  verify_hash
  chmod 0755 "$TEMP_FILE"
fi

extract_via_7zip() {
   TARGET_DIR=`mktemp -d "${TMPDIR:-/tmp}/ev.XXXXXX"`
   7z x "$TEMP_FILE" -so | 7z x -aoa -si -ttar -o"$TARGET_DIR"
}

extract_via_tar() {
  TARGET_DIR=`mktemp -d "${TMPDIR:-/tmp}/ev.XXXXXX"`
  tar xzf "$TEMP_FILE" -C "$TARGET_DIR"
}

if [ "$PERFORM_INSTALL" = true ]; then
  if hash tar 2> /dev/null; then
    extract_via_tar
  elif hash 7z 2> /dev/null; then
    extract_via_7zip
  fi
fi

get_file_location() {
  EV_BINARY="${TARGET_DIR}/bin/ev"
  chmod 0755 "$EV_BINARY"
}

move_file_general() {
  if ! mv "$EV_BINARY" "$INSTALL_PATH" 2> /dev/null; then
    sudo -k mv "$EV_BINARY" "$INSTALL_PATH"
  fi
}

if [ "$PERFORM_INSTALL" = true ]; then
  get_file_location
  move_file_general
fi

echo 'Done!'
